/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CoalescePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/SettingsManager.ts
var DEFAULT_SETTINGS = {
  mySetting: "default",
  sortDescending: true,
  blocksCollapsed: true,
  showInDailyNotes: false,
  blockBoundaryStrategy: "default",
  theme: "default"
};
var SettingsManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.plugin.loadData());
  }
  async saveSettings() {
    await this.plugin.saveData(this.settings);
  }
};

// src/CoalesceManager.ts
var import_obsidian3 = require("obsidian");

// src/CoalesceView.ts
var import_obsidian2 = require("obsidian");

// src/BlockComponent.ts
var import_obsidian = require("obsidian");

// src/Logger.ts
var _Logger = class {
  static enable() {
    _Logger.enabled = true;
  }
  static disable() {
    _Logger.enabled = false;
  }
  info(message, ...optionalParams) {
    if (_Logger.enabled) {
      console.log(message, ...optionalParams);
    }
  }
  warn(message, ...optionalParams) {
    if (_Logger.enabled) {
      console.warn(message, ...optionalParams);
    }
  }
  debug(message, ...optionalParams) {
    if (_Logger.enabled) {
      console.debug(message, ...optionalParams);
    }
  }
};
var Logger = _Logger;
Logger.enabled = false;

// src/BlockComponent.ts
var BlockComponent = class {
  constructor(contents, filePath, noteName) {
    this.contents = contents;
    this.filePath = filePath;
    this.noteName = noteName;
    this.logger = new Logger();
  }
  async render(container, view, onLinkClick) {
    const displayText = this.filePath.replace(/\.md$/, "");
    const headerContainer = container.createDiv({ cls: "block-header" });
    this.toggleButton = headerContainer.createEl("span", {
      cls: "toggle-arrow",
      text: "\u25BC"
      // Down-pointing arrow for open state
    });
    const blockTitle = headerContainer.createEl("a", {
      text: displayText,
      cls: "block-title",
      href: "#"
    });
    blockTitle.addEventListener("click", (event) => {
      event.preventDefault();
      onLinkClick(this.filePath);
    });
    const blockContainer = container.createDiv({ cls: "backlink-item" });
    const contentPreview = blockContainer.createDiv("content-preview");
    await import_obsidian.MarkdownRenderer.render(
      view.app,
      this.contents,
      contentPreview,
      this.filePath,
      view
    );
    contentPreview.querySelectorAll("a.internal-link").forEach((link) => {
      link.addEventListener("click", (event) => {
        this.logger.info("Link clicked!");
        event.preventDefault();
        const href = link.getAttribute("href");
        if (href) {
          const decodedPath = decodeURI(href);
          const fullPath = decodedPath.endsWith(".canvas") ? decodedPath : decodedPath.endsWith(".md") ? decodedPath : `${decodedPath}.md`;
          onLinkClick(fullPath);
        }
      });
    });
    blockContainer.style.display = "block";
    this.toggleButton.addEventListener("click", () => {
      const isCollapsed = blockContainer.style.display === "none";
      blockContainer.style.display = isCollapsed ? "block" : "none";
      this.toggleButton.textContent = isCollapsed ? "\u25BC" : "\u25B6";
    });
    this.blockContainer = blockContainer;
  }
  getContainer() {
    return this.blockContainer;
  }
  setArrowState(isExpanded) {
    if (this.toggleButton) {
      this.toggleButton.textContent = isExpanded ? "\u25BC" : "\u25B6";
    }
  }
};

// src/HeaderComponent.ts
var HeaderComponent = class {
  createHeader(container, fileCount, blockCount, sortDescending, onSortToggle, onCollapseToggle, isCollapsed, currentStrategy, onStrategyChange, currentTheme, onThemeChange) {
    const header = document.createElement("div");
    header.classList.add("backlinks-header");
    const leftContainer = document.createElement("div");
    leftContainer.classList.add("backlinks-header-left");
    const rightContainer = document.createElement("div");
    rightContainer.classList.add("backlinks-header-right");
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("viewBox", "0 0 100 100");
    svg.setAttribute("width", "18");
    svg.setAttribute("height", "18");
    svg.setAttribute("fill", "currentColor");
    svg.innerHTML = `<path d="M85 40.5C85 22.5 70.5 10 52.5 10c-27.6 0-43.1 24.5-43.1 40 0 21.7 16.8 40 42.6 40 11.3 0 21.1-2.8 27.4-6.5 2.2-1.3 3.6-2.8 3.6-4.4 0-1.3-0.9-2.4-2.2-2.4-0.6 0-1.2 0.2-2 0.7-6.8 4.8-15.9 7.1-26.8 7.1-22.3 0-36.2-15.4-36.2-34.5 0-19.1 13.9-34.5 36.2-34.5 15.4 0 27.5 10.3 27.5 24.5 0 11.8-7.8 19.5-16.8 19.5-4.9 0-7.8-2.5-7.8-6.7 0-1.1 0.2-2.3 0.5-3.4l4.1-16.8c0.9-3.7-1.1-5.6-4-5.6-4.9 0-9.6 5-9.6 12.3 0 5.6 3.1 9.5 9.3 9.5 4.7 0 9.1-1.9 12.4-5.4 3.3 3.5 8.2 5.4 14.3 5.4C73.2 60 85 51.5 85 40.5z"/>`;
    leftContainer.appendChild(svg);
    const title = document.createElement("span");
    title.classList.add("header-title");
    title.textContent = `${fileCount} ${fileCount === 1 ? "Backlink" : "Backlinks"}, ${blockCount} ${blockCount === 1 ? "Block" : "Blocks"}`;
    leftContainer.appendChild(title);
    const sortButton = document.createElement("button");
    sortButton.classList.add("clickable-icon", "sort-button");
    sortButton.innerHTML = `
            <svg width="16" height="16" viewBox="0 0 16 16" style="transform: ${sortDescending ? "none" : "rotate(180deg)"}">
                <path fill="currentColor" d="M4 4l4 4 4-4H4z"/>
            </svg>
        `;
    sortButton.addEventListener("click", onSortToggle);
    leftContainer.appendChild(sortButton);
    const collapseButton = document.createElement("button");
    collapseButton.classList.add("clickable-icon", "collapse-button");
    collapseButton.innerHTML = `
            <svg width="16" height="16" viewBox="0 0 16 16" style="transform: ${isCollapsed ? "rotate(-90deg)" : "none"}">
                <path fill="currentColor" d="M4 4l4 4 4-4H4z"/>
            </svg>
        `;
    collapseButton.addEventListener("click", onCollapseToggle);
    leftContainer.appendChild(collapseButton);
    const blockBoundaryStrategySelect = document.createElement("select");
    blockBoundaryStrategySelect.classList.add("strategy-select");
    const blockBoundaryStrategies = ["default", "single-line"];
    blockBoundaryStrategies.forEach((strategy) => {
      const option = document.createElement("option");
      option.value = strategy;
      option.textContent = strategy.replace("-", " ").toUpperCase();
      option.selected = strategy === currentStrategy;
      blockBoundaryStrategySelect.appendChild(option);
    });
    blockBoundaryStrategySelect.addEventListener("change", () => {
      onStrategyChange(blockBoundaryStrategySelect.value);
    });
    leftContainer.appendChild(blockBoundaryStrategySelect);
    const themeSelect = document.createElement("select");
    themeSelect.classList.add("theme-select");
    const themes = ["default", "minimal", "modern"];
    themes.forEach((theme) => {
      const option = document.createElement("option");
      option.value = theme;
      option.textContent = theme.charAt(0).toUpperCase() + theme.slice(1);
      option.selected = theme === currentTheme;
      themeSelect.appendChild(option);
    });
    themeSelect.addEventListener("change", () => {
      onThemeChange(themeSelect.value);
    });
    leftContainer.appendChild(themeSelect);
    const settingsButton = document.createElement("button");
    settingsButton.className = "settings-button";
    settingsButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="3"></circle>
                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
            </svg>
        `;
    let popup = null;
    settingsButton.addEventListener("click", (e) => {
      e.stopPropagation();
      if (popup) {
        popup.remove();
        popup = null;
        return;
      }
      popup = document.createElement("div");
      popup.className = "settings-popup";
      const settingItem = document.createElement("div");
      settingItem.className = "settings-item";
      settingItem.textContent = "Placeholder Setting";
      popup.appendChild(settingItem);
      const rect = settingsButton.getBoundingClientRect();
      popup.style.top = `${rect.bottom + 5}px`;
      popup.style.left = `${rect.left}px`;
      document.body.appendChild(popup);
      const closePopup = (e2) => {
        if (popup && !popup.contains(e2.target) && e2.target !== settingsButton) {
          popup.remove();
          popup = null;
          document.removeEventListener("click", closePopup);
        }
      };
      document.addEventListener("click", closePopup);
    });
    leftContainer.appendChild(svg);
    leftContainer.appendChild(title);
    leftContainer.appendChild(sortButton);
    leftContainer.appendChild(collapseButton);
    leftContainer.appendChild(blockBoundaryStrategySelect);
    leftContainer.appendChild(themeSelect);
    rightContainer.appendChild(settingsButton);
    header.appendChild(leftContainer);
    header.appendChild(rightContainer);
    return header;
  }
};

// src/DefaultBlockBoundaryStrategy.ts
var DefaultBlockBoundaryStrategy = class {
  findBlockBoundaries(content, currentNoteName) {
    const boundaries = [];
    const regex = new RegExp(`\\[\\[${currentNoteName}\\]\\]`, "g");
    let match;
    while ((match = regex.exec(content)) !== null) {
      const lineStartIndex = content.lastIndexOf("\n", match.index) + 1;
      const endIndex = content.indexOf("---", match.index);
      const nextMentionIndex = content.indexOf(`[[${currentNoteName}]]`, match.index + 1);
      let blockEndIndex = content.length;
      if (endIndex !== -1 && (nextMentionIndex === -1 || endIndex < nextMentionIndex)) {
        blockEndIndex = endIndex;
      } else if (nextMentionIndex !== -1) {
        blockEndIndex = nextMentionIndex;
      }
      boundaries.push({ start: lineStartIndex, end: blockEndIndex });
    }
    return boundaries;
  }
};

// src/SingleLineBlockBoundaryStrategy.ts
var SingleLineBlockBoundaryStrategy = class {
  findBlockBoundaries(content, currentNoteName) {
    const boundaries = [];
    const lines = content.split("\n");
    if (lines.length > 0) {
      const firstLine = lines[0];
      boundaries.push({ start: 0, end: firstLine.length });
    }
    return boundaries;
  }
};

// src/CoalesceView.ts
var CoalesceView = class {
  constructor(view, currentNoteName, settingsManager, blockBoundaryStrategy) {
    this.view = view;
    this.settingsManager = settingsManager;
    this.logger = new Logger();
    this.headerComponent = new HeaderComponent();
    this.allBlocks = [];
    this.currentNoteName = currentNoteName;
    this.blockBoundaryStrategy = blockBoundaryStrategy;
    this.sortDescending = this.settingsManager.settings.sortDescending;
    this.blocksCollapsed = this.settingsManager.settings.blocksCollapsed;
    this.container = this.createBacklinksContainer();
    this.logger.info("Appending backlinks container to the view");
    this.currentTheme = this.settingsManager.settings.theme;
    this.applyTheme(this.currentTheme);
    const markdownContent = this.view.containerEl.querySelector(".markdown-preview-view") || this.view.contentEl;
    if (markdownContent) {
      markdownContent.classList.add("markdown-content");
      markdownContent.appendChild(this.container);
    } else {
      this.logger.warn("Markdown content area not found.");
    }
  }
  createBacklinksContainer() {
    const container = document.createElement("div");
    container.classList.add("custom-backlinks-container");
    return container;
  }
  async getBlockData(filePath, currentNoteName) {
    const blocks = [];
    try {
      const file = this.view.app.vault.getAbstractFileByPath(filePath);
      if (file && file instanceof import_obsidian2.TFile) {
        const content = await this.view.app.vault.read(file);
        const boundaries = this.blockBoundaryStrategy.findBlockBoundaries(content, currentNoteName);
        for (const { start, end } of boundaries) {
          const blockContent = content.substring(start, end);
          const block = new BlockComponent(blockContent, filePath, currentNoteName);
          blocks.push(block);
        }
      }
    } catch (error) {
      console.error(`Error reading file content for ${filePath}:`, error);
    }
    return blocks;
  }
  updateBlockBoundaryStrategy(strategy) {
    switch (strategy) {
      case "single-line":
        this.blockBoundaryStrategy = new SingleLineBlockBoundaryStrategy();
        break;
      case "default":
      default:
        this.blockBoundaryStrategy = new DefaultBlockBoundaryStrategy();
        break;
    }
  }
  applyTheme(theme) {
    const themes = ["default", "minimal", "modern"];
    themes.forEach((t) => {
      this.container.classList.remove(`theme-${t}`);
    });
    this.container.classList.add(`theme-${theme}`);
  }
  async handleThemeChange(theme) {
    this.currentTheme = theme;
    this.settingsManager.settings.theme = theme;
    await this.settingsManager.saveSettings();
    this.applyTheme(theme);
  }
  async updateBacklinks(filesLinkingToThis, onLinkClick) {
    this.logger.info("Updating backlinks:", filesLinkingToThis);
    this.container.empty();
    const linksContainer = this.container.createDiv("backlinks-list");
    this.logger.info("Links container:", linksContainer);
    this.allBlocks = [];
    for (const sourcePath of filesLinkingToThis) {
      const blocks = await this.getBlockData(sourcePath, this.currentNoteName);
      blocks.forEach((block) => {
        this.allBlocks.push({ block, sourcePath });
      });
    }
    this.allBlocks.sort((a, b) => this.sortDescending ? b.sourcePath.localeCompare(a.sourcePath) : a.sourcePath.localeCompare(b.sourcePath));
    for (const { block } of this.allBlocks) {
      await block.render(linksContainer, this.view, onLinkClick);
      const blockContainer = block.getContainer();
      blockContainer.style.display = this.blocksCollapsed ? "none" : "block";
      block.setArrowState(!this.blocksCollapsed);
    }
    const createHeader = () => {
      return this.headerComponent.createHeader(
        this.container,
        filesLinkingToThis.length,
        this.allBlocks.length,
        this.sortDescending,
        () => {
          this.toggleSort();
          this.updateBacklinks(filesLinkingToThis, onLinkClick);
        },
        () => {
          this.toggleAllBlocks();
          const oldHeader = this.container.querySelector(".backlinks-header");
          if (oldHeader && this.container.contains(oldHeader)) {
            const newHeader = createHeader();
            this.container.replaceChild(newHeader, oldHeader);
          }
        },
        this.blocksCollapsed,
        this.settingsManager.settings.blockBoundaryStrategy,
        async (strategy) => {
          this.settingsManager.settings.blockBoundaryStrategy = strategy;
          await this.settingsManager.saveSettings();
          this.updateBlockBoundaryStrategy(strategy);
          await this.updateBacklinks(filesLinkingToThis, onLinkClick);
        },
        this.currentTheme,
        async (theme) => {
          await this.handleThemeChange(theme);
        }
      );
    };
    const header = createHeader();
    this.container.appendChild(header);
    this.container.appendChild(linksContainer);
  }
  toggleSort() {
    this.sortDescending = !this.sortDescending;
    this.settingsManager.settings.sortDescending = this.sortDescending;
    this.settingsManager.saveSettings();
  }
  toggleAllBlocks() {
    this.blocksCollapsed = !this.blocksCollapsed;
    this.settingsManager.settings.blocksCollapsed = this.blocksCollapsed;
    this.settingsManager.saveSettings();
    this.allBlocks.forEach(({ block }) => {
      const blockContainer = block.getContainer();
      blockContainer.style.display = this.blocksCollapsed ? "none" : "block";
      block.setArrowState(!this.blocksCollapsed);
    });
  }
  clear() {
    if (this.container.parentElement) {
      this.container.parentElement.removeChild(this.container);
    }
    this.logger.info("Backlinks view cleared");
  }
};

// src/CoalesceManager.ts
var CoalesceManager = class {
  constructor(app, settingsManager) {
    this.app = app;
    this.settingsManager = settingsManager;
    this.coalesceView = null;
    this.logger = new Logger();
  }
  handleFileOpen(file) {
    if (!file)
      return;
    const view = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!view)
      return;
    if (this.coalesceView) {
      this.coalesceView.clear();
    }
    const currentNoteName = file.basename;
    const blockBoundaryStrategy = this.getStrategyFromSettings();
    this.coalesceView = new CoalesceView(view, currentNoteName, this.settingsManager, blockBoundaryStrategy);
    const backlinks = this.app.metadataCache.resolvedLinks;
    const filesLinkingToThis = Object.entries(backlinks).filter(([_, links]) => file.path in links).map(([sourcePath]) => sourcePath);
    this.coalesceView.updateBacklinks(filesLinkingToThis, (path) => {
      this.app.workspace.openLinkText(path, "", false);
    });
  }
  getStrategyFromSettings() {
    const blockBoundaryStrategy = this.settingsManager.settings.blockBoundaryStrategy;
    switch (blockBoundaryStrategy) {
      case "single-line":
        return new SingleLineBlockBoundaryStrategy();
      case "default":
      default:
        return new DefaultBlockBoundaryStrategy();
    }
  }
  clearBacklinks() {
    if (this.coalesceView) {
      this.coalesceView.clear();
    }
  }
};

// src/SettingsTab.ts
var import_obsidian4 = require("obsidian");
var CoalesceSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin, settingsManager) {
    super(app, plugin);
    this.plugin = plugin;
    this.settingsManager = settingsManager;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian4.Setting(containerEl).setName("Show in Daily Notes").setDesc("Enable Coalesce view in daily notes").addToggle((toggle) => toggle.setValue(this.settingsManager.settings.showInDailyNotes).onChange(async (value) => {
      this.settingsManager.settings.showInDailyNotes = value;
      await this.settingsManager.saveSettings();
    }));
  }
};

// main.ts
var CoalescePlugin = class extends import_obsidian5.Plugin {
  async onload() {
    this.logger = new Logger();
    this.settingsManager = new SettingsManager(this);
    await this.settingsManager.loadSettings();
    this.addSettingTab(new CoalesceSettingTab(this.app, this, this.settingsManager));
    this.coalesceManager = new CoalesceManager(this.app, this.settingsManager);
    this.app.workspace.on("file-open", (file) => {
      if (!file)
        return;
      const isDaily = this.isDailyNote(file);
      if (!isDaily || isDaily && this.settingsManager.settings.showInDailyNotes) {
        this.coalesceManager.handleFileOpen(file);
      } else {
        this.coalesceManager.clearBacklinks();
      }
    });
    window.enableLogging = function() {
      Logger.enable();
      console.log("Logging enabled");
    };
    window.disableLogging = function() {
      Logger.disable();
      console.log("Logging disabled");
    };
  }
  onunload() {
    this.coalesceManager.clearBacklinks();
  }
  isDailyNote(file) {
    const dailyNotesPlugin = this.app.internalPlugins.plugins["daily-notes"];
    if (!dailyNotesPlugin || !dailyNotesPlugin.enabled) {
      this.logger.debug("Daily Notes plugin is not enabled.");
      return false;
    }
    const dailyNotesFolder = dailyNotesPlugin.instance.options.folder || "";
    if (!dailyNotesFolder) {
      this.logger.debug("Daily Notes folder not set, using vault root.");
    }
    const dailyNotePattern = /^\d{4}-\d{2}-\d{2}\.md$/;
    if (!file.path.startsWith(dailyNotesFolder)) {
      return false;
    }
    return dailyNotePattern.test(file.name);
  }
};
//# sourceMappingURL=data:application/json;base64,
